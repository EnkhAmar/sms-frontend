{"version":3,"sources":["views/app-views/datasheet/EditableRow/index.js","views/app-views/datasheet/EditableCell/index.js","views/app-views/datasheet/EditableTable/index.js","views/app-views/datasheet/DatasheetTable/index.js","views/app-views/datasheet/index.js"],"names":["EditableContext","React","createContext","EditableRow","index","row","cells","props","Form","useForm","form","component","Provider","value","config","localStorage","getItem","EditableCell","title","editable","children","dataIndex","record","handleSave","inputType","required","datasheetStatus","lesson","editing","attributesRenderer","updated","col","cell","onRevert","onChange","onKeyDown","restProps","inputRef","useRef","body","useEffect","current","focus","options","filter","item","branch","DATASHEET_REGISTER_TYPE","DATASHEET_TIME","handleDateTime","e","target","childNode","input","id","initialValue","autoFocus","openOnFocus","closeOnSelect","console","log","existing","phone","onSelect","loadOptions","inputValue","callback","length","axios","get","url","then","res","data","catch","err","response","message","error","onInputKeyDown","name","theme","borderRadius","getOptionLabel","getOptionValue","isDisabled","isSearchable","className","type","ref","bordered","onPressEnter","Item","style","margin","minHeight","rules","textAlign","datasheetHeader","readOnly","width","updateDatasheet","put","generateCellData","validatePhoneNumber","test","DatasheetTable","filters","useSelector","state","user","userLogin","currentTheme","useState","isDatasheetLoading","setDatasheetLoading","status","setStatus","setLesson","operator","setOperator","rawDatasource","setRawDataSource","dataSource","setDatasource","role_id","OPERATOR","search","day","date","datasheetFilter","setDatasheetFilter","handleDatasheetFetch","useCallback","_filter","Object","keys","forEach","queryParams","map","join","fetchDatasheet","_dataSource","datasheets","key","_cellData","push","user_phone","user_firstname","user_lastname","operator_firstname","firstname","register_type","description","time","groups","STUDENT_GROUP","handleDetailFetch","_filters","detailList","details","post","fetchDetails","datasheet_status","handleDatasheetUpdate","a","success","handleNewDatasheetWithExisting","additional","newItem","lastname","JSON","stringify","handleDatasheetChange","changes","rawGrid","_item","with_user","handleFilterChange","_value","handleDiableClick","handleSelectClear","Flex","justifyContent","Group","defaultValue","buttonStyle","Button","format","allowClear","onClear","bind","onClick","disabled","placeholder","Option","Search","onSearch","valueRenderer","_body","find","undefined","onContextMenu","i","j","preventDefault","rowRenderer","dataEditor","onCellsChanged","Datasheet","TableOutlined","extra"],"mappings":"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","file":"static/js/20.4b7903ee.chunk.js","sourcesContent":["import React from 'react';\nimport { Form } from 'antd';\n\nexport const EditableContext = React.createContext();\n\nconst EditableRow = ({ index, row, cells, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nexport default EditableRow;","import React, { useState, useEffect, useRef } from 'react';\nimport { Input, Form, message, TimePicker } from 'antd';\nimport Select from 'react-select'\nimport { DATASHEET_REGISTER_TYPE, DATASHEET_TIME, url } from 'configs/EnvironmentConfig';\nimport AsyncSelect from 'react-select/async';\nimport './style.css';\nimport axios from 'axios';\n\nconst header = {\n    \"Content-type\": \"application/json\",\n    \"Authorization\": `Bearer ${ localStorage.getItem(\"userToken\") }`\n}\n\nconst config = {\n    \"headers\": header\n}\n\nconst EditableCell = ({\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    handleSave,\n    inputType,\n    required,\n    datasheetStatus,\n    lesson,\n    attributesRenderer,\n    editing,\n    updated,\n    row,\n    col,\n    cell,\n    onChange,\n    onRevert,\n    onKeyDown,\n    ...restProps\n}) => {\n    // const [editing, setEditing] = useState(false);\n    const inputRef = useRef();\n    let body = children;\n\n    useEffect(() => {\n        if (editing && inputType === \"normal\") {\n            inputRef.current.focus();\n        }\n    }, [ editing, inputType, ]);\n\n    let options = [];\n    switch(dataIndex) {\n        case \"status\":\n            options = datasheetStatus.filter(item => record.branch === item.branch);\n            break;\n        case \"lesson\":\n            options = lesson.filter(item => record.branch === item.branch);\n            break;\n        case \"register_type\":\n            options = DATASHEET_REGISTER_TYPE;\n            break;\n        case \"time\":\n            options = DATASHEET_TIME;\n            break;\n        default:\n            break;\n    }\n\n    const handleAsyncPhoneSearch = (inputValue, callback) => {\n        if (record.branch===null) {\n            message.error(\"Select branch!\");\n            return;\n        }\n        if (inputValue.length < 8)\n            return;\n        axios.get(`${url}/api/auth/action/?branch=${record.branch}&phone=${inputValue}`, config)\n            .then(res => {\n                if (res.data.data.length != 0)\n                    callback(res.data.data)\n                else \n                    callback([{ phone: inputValue, id: 0 }])\n            })\n            .catch(err => console.log(err.response.data))\n    }\n\n    const handleSelectSave = e => {\n        handleSave([{ cell, row, col, value: e.id }])\n        onRevert();\n    };\n\n    const handleDateTime = e => {\n        handleSave([{ cell, row, col, value: e.target.value }])\n        onRevert();\n    };\n\n    const handlePhoneSearch = e => {\n        console.log(e)\n        if (e.id != 0)\n            handleSave([{ cell, row, col, value: e, existing: true }])\n        else {\n            handleSave([{ cell, row, col, value: e.phone }])\n        }\n        onRevert();\n    };\n    let childNode = children;\n    if (editable) {\n        let input;\n        switch(inputType) {\n            case \"select\":\n                input = record.id === 0 && dataIndex===\"user_phone\" ? \n                (\n                    <AsyncSelect\n                        initialValue={ cell.value }\n                        autoFocus\n                        openOnFocus\n                        closeOnSelect\n                        onChange={ handlePhoneSearch }\n                        onSelect={ () => console.log(\"dwqdwqwd\") }\n                        loadOptions={ handleAsyncPhoneSearch }\n                        onInputKeyDown={ e => console.log(e) }\n                        name=\"name\"\n                        theme={ { borderRadius: 0 } }\n                        getOptionLabel={ item => item.phone }\n                        getOptionValue={ item => item.id }\n                        isDisabled={ record.branch===null ? true : false }\n                    />\n                )\n                : \n                (\n                    <Select\n                        initialValue={ cell.value }\n                        autoFocus\n                        openOnFocus\n                        closeOnSelect\n                        isSearchable\n                        onChange={ handleSelectSave }\n                        name=\"name\"\n                        theme={ { borderRadius: 0 } }\n                        getOptionLabel={ item => item.name }\n                        getOptionValue={ item => item.id }\n                        onInputKeyDown={ onKeyDown }\n                        isDisabled={ record.branch===null ? true : false }\n                        options={ options }\n                    />\n                )\n                break;\n            case \"date\":\n                input = ( <input className=\"date-input\" type=\"date\" onChange={ handleDateTime } /> );\n                break\n            default:\n                input = ( <Input onKeyDown={ restProps.onKeyDown } ref={inputRef} bordered={ false } onPressEnter={ handleDateTime } /> );\n        }\n        childNode = editing ? (\n            <Form.Item\n                style={{\n                    margin: 0,\n                    minHeight: 0\n                }}\n                name={dataIndex}\n                rules={[\n                    required ? {\n                        required: true,\n                        message: `Required`,\n                    } : {\n                        required: false\n                    }\n                ]}\n            >\n                { input }\n            </Form.Item>\n        ) : (\n            <div\n                className=\"editable-cell-value-wrap\"\n                style={{\n                    textAlign: \"center\"\n                }}\n            >\n                { body }\n            </div>\n        );\n    }\n\n    return childNode;\n};\n\n\nexport default EditableCell;\n","import React, { useState, useEffect } from 'react';\nimport { Table, Button, Popconfirm, Pagination, Space } from 'antd';\nimport EditableRow from '../EditableRow';\nimport EditableCell from '../EditableCell';\nimport axios from 'axios';\nimport { url } from \"../../../../configs/EnvironmentConfig\";\nimport Flex from 'components/shared-components/Flex';\nimport { useSelector } from 'react-redux';\nimport { OPERATOR } from 'constants/AppConstant';\n\nconst components = {\n    body: {\n        row: EditableRow,\n        cell: EditableCell,\n    },\n};\n\nconst columnsModel = [\n    {\n        title: 'Status',\n        dataIndex: 'status',\n        width: '7.5%',\n        editable: true,\n        inputType: \"select\",\n        align: \"center\",\n    },\n    {\n        title: 'Phone',\n        dataIndex: 'user_phone',\n        width: '10%',\n        editable: true,\n        inputType: \"select\",\n        align: \"center\",\n        required: true\n    },\n    {\n        title: 'Firstname',\n        dataIndex: 'user_firstname',\n        width: '7.5%',\n        editable: true,\n        inputType: \"normal\",\n        align: \"center\",\n        required: true\n    },\n    {\n        title: 'Lastname',\n        dataIndex: 'user_lastname',\n        width: '7.5%',\n        editable: true,\n        inputType: \"normal\",\n        align: \"center\"\n    },\n    {\n        title: 'Lesson',\n        dataIndex: 'lesson',\n        editable: true,\n        inputType: \"select\",\n        width: '10%',\n        align: \"center\"\n    },\n    {\n        title: 'Register Type',\n        dataIndex: 'register_type',\n        editable: true,\n        inputType: \"select\",\n        width: '10%',\n        align: \"center\"\n    },\n    {\n        title: 'Description',\n        dataIndex: 'description',\n        editable: true,\n        inputType: \"normal\",\n        width: '17.5%',\n        align: \"center\"\n    },\n    {\n        title: 'Operator',\n        dataIndex: 'operator_firstname',\n        editable: false,\n        inputType: \"select\",\n        width: '10%',\n        align: \"center\"\n    },\n    {\n        title: 'Time',\n        dataIndex: 'time',\n        editable: true,\n        inputType: \"time\",\n        width: '10%',\n        align: \"center\"\n    },\n    {\n        title: 'Date',\n        dataIndex: 'created',\n        editable: true,\n        inputType: \"date\",\n        width: '10%',\n        align: \"center\"\n    }\n];\n\nconst header = {\n    \"Content-type\": \"application/json\",\n    \"Authorization\": `Bearer ${ localStorage.getItem(\"userToken\") }`\n}\n\nconst config = {\n    \"headers\": header\n}\n\nconst fetchDetails = (details, filter) => {\n    let _filter = { ...filter }\n    if (\"school\" in _filter && _filter.school===null)\n        delete _filter.school\n    if (\"branch\" in _filter && _filter.branch===null)\n        delete _filter.branch\n    console.log({ \"projection\": details, ..._filter });\n    return axios.post(`${url}/api/utility/detail/`, { \"projection\": details, ..._filter }, config);\n}\n\nconst fetchDatasheet = (page, filter) => {\n    let _filter = { ...filter }\n    if (\"school\" in _filter && _filter.school===null)\n        delete _filter.school\n    if (\"branch\" in _filter && _filter.branch===null)\n        delete _filter.branch\n    let queryParams = Object.keys(_filter).map(item => `${item}=${_filter[item]}`).join(\"&\");\n    return axios.get(`${url}/api/datasheet/action/?page=${page}${queryParams===\"\" ? \"\" : \"&\" + queryParams}`, config)\n}\n\nconst updateDatasheet = (data, fitler) => {\n    return axios.put(`${url}/api/datasheet/action/${data.id}/`, data, config);\n}\n\nconst EditableTable = () => {\n\n    const filters = useSelector(state => state.filters);\n    const user = useSelector(state => state.userLogin.user);\n    const [ pageCount, setPageCount ] = useState(0);\n    const [ isDatasheetLoading, setDatasheetLoading ] = useState(false);\n    const [ status, setStatus ] = useState([]);\n    const [ lesson, setLesson ] = useState([]);\n    const [ currentPage, setCurrentPage ] = useState(1);\n    const [ dataSource, setDatasource ] = useState([]);\n\n    const columns = columnsModel.map(col => {\n        if (!col.editable) {\n            return col;\n        }\n        let datasheetStatus = col.dataIndex === \"status\" ? status : null;\n        let _lesson = col.dataIndex === \"lesson\" ? lesson : null;\n        return {\n            ...col,\n            key: col.id + \"datasheet\",\n            onCell: record => ({\n                record,\n                editable: col.editable,\n                dataIndex: col.dataIndex,\n                title: col.title,\n                inputType: col.inputType,\n                datasheetStatus,\n                lesson: _lesson,\n                required: col.required,\n                handleSave: handleSave,\n            }),\n        };\n    });\n    useEffect(() => {\n        handlePaginationChange(1);\n        handleDetailFetch();\n    }, [ filters ])\n\n    const handlePaginationChange = page => {\n        setDatasheetLoading(true);\n        setCurrentPage(page);\n        let _filters = user.role_id===OPERATOR ? { branch: user.branch } : filters;\n        fetchDatasheet(page, _filters)\n            .then(res => {\n                const datasheets = res.data.results.map(item => { item.key = item.id + \"datasheet\"; return item; })\n                setPageCount(res.data.count)\n                setDatasource([{\n                    id: 0,\n                    key: \"0datasheet\",\n                    user_phone: \"\",\n                    user_firstname: \"\",\n                    user_lasttname: \"\",\n                    operator_firstname: \"\",\n                    register_type: \"\",\n                    description: \"\",\n                    time: \"\",\n                    user: \"\",\n                    operator: \"\",\n                    status: \"\",\n                    lesson: \"\",\n                    branch: filters.branch\n                }, ...datasheets])\n                setDatasheetLoading(false);\n            })\n            .catch(err => {\n                console.log(err.response.data)\n            })\n    }\n    \n    const handleDetailFetch = () => {\n        let _filters = user.role_id===OPERATOR ? { branch: user.branch } : filters;\n        fetchDetails([ \"lesson\", \"datasheet_status\" ], _filters)\n            .then(res => {\n                setLesson(res.data.data.lesson);\n                setStatus(res.data.data.datasheet_status);\n            })\n            .catch(err => {\n                console.log(err.response.data);\n            })\n    }\n\n    const handleDatasheetUpdate = data => {\n        console.log(data.status)\n        updateDatasheet(data, null)\n            .then(res => {\n                console.log(res)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    const handleDatasheetCreate = data => {\n\n    }\n\n    const handleDelete = key => {\n        // const dataSource = [...this.state.dataSource];\n        // setState({\n        //     dataSource: dataSource.filter(item => item.key !== key),\n        // });\n    };\n\n    const handleAdd = () => {\n        // const { count, dataSource } = state;\n        // const newData = {\n        //     key: count,\n        //     name: `Edward King ${count}`,\n        //     age: 32,\n        //     address: `London, Park Lane no. ${count}`,\n        // };\n        // setState({\n        //     dataSource: [...dataSource, newData],\n        //     count: count + 1,\n        // });\n    };\n\n    const handleSave = row => {\n        console.log(row);\n        if (row.id != 0)\n            handleDatasheetUpdate(row);\n        else\n            handleDatasheetCreate(row);\n        if (row.status != null)\n            row.status = status.find(item => item.id===row.status).name;\n        if (row.lesson != null)           \n            row.lesson = lesson.find(item => item.id===row.lesson).name;\n        const newData = [ ...dataSource ];\n        const index = newData.findIndex(item => row.id === item.id);\n        const item = newData[index];\n        newData.splice(index, 1, { ...item, ...row });\n        setDatasource(newData)\n    };\n\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"20px\" }}>\n            <Table\n                loading = { isDatasheetLoading }\n                components={components}\n                rowClassName={() => 'editable-row'}\n                bordered={ true }\n                dataSource={dataSource}\n                columns={columns}\n                pagination={ false }\n            />\n            <Flex justifyContent=\"end\">\n                <Pagination current={ currentPage } onChange={ handlePaginationChange } total={ pageCount } pageSize={ 20 } />\n            </Flex>\n        </div>\n    )\n}\n\n// class EditableTable extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             dataSource: [\n//                 {\n//                     key: '0',\n//                     name: 'Edward King 0',\n//                     age: '32',\n//                     address: 'London, Park Lane no. 0',\n//                 },\n//                 {\n//                     key: '1',\n//                     name: 'Edward King 1',\n//                     age: '32',\n//                     address: 'London, Park Lane no. 1',\n//                 },\n//             ],\n//             count: 2,\n//         };\n//     }\n\n//     handleDelete = key => {\n//         const dataSource = [...this.state.dataSource];\n//         this.setState({\n//             dataSource: dataSource.filter(item => item.key !== key),\n//         });\n//     };\n\n//     handleAdd = () => {\n//         const { count, dataSource } = this.state;\n//         const newData = {\n//             key: count,\n//             name: `Edward King ${count}`,\n//             age: 32,\n//             address: `London, Park Lane no. ${count}`,\n//         };\n//         this.setState({\n//             dataSource: [...dataSource, newData],\n//             count: count + 1,\n//         });\n//     };\n\n//     handleSave = row => {\n//         console.log(\"dwqdwqwdq\");\n//         const newData = [ ...this.state.dataSource ];\n//         const index = newData.findIndex(item => row.key === item.key);\n//         const item = newData[index];\n//         console.log(item);\n//         newData.splice(index, 1, { ...item, ...row });\n//         this.setState({\n//             dataSource: newData,\n//         });\n//     };\n\n//     render() {\n//         const { dataSource } = this.state;\n//         const components = {\n//             body: {\n//                 row: EditableRow,\n//                 cell: EditableCell,\n//             },\n//         };\n//         const columns = this.columns.map(col => {\n//             if (!col.editable) {\n//                 return col;\n//             }\n\n//             return {\n//                 ...col,\n//                 onCell: record => ({\n//                     record,\n//                     editable: col.editable,\n//                     dataIndex: col.dataIndex,\n//                     title: col.title,\n//                     handleSave: this.handleSave,\n//                 }),\n//             };\n//         });\n//         return (\n//             <div>\n//                 <Button\n//                     onClick={this.handleAdd}\n//                     type=\"primary\"\n//                     style={{\n//                         marginBottom: 16,\n//                     }}\n//                 >\n//                     Add a row\n//                 </Button>\n//                 <Table\n//                     components={components}\n//                     rowClassName={() => 'editable-row'}\n//                     bordered\n//                     dataSource={dataSource}\n//                     columns={columns}\n//                 />\n//             </div>\n//         );\n//     }\n// }\n\nexport default EditableTable;","import React, { useState, useEffect, useCallback } from 'react';\nimport ReactDataSheet from \"react-datasheet\";\nimport DataEditor from \"react-datasheet/lib/DataEditor\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nimport \"./style.css\";\nimport EditableRow from \"../EditableRow\";\nimport EditableCell from \"../EditableCell\";\nimport { DATASHEET_REGISTER_TYPE, url } from \"../../../../configs/EnvironmentConfig\";\nimport { useSelector } from 'react-redux';\nimport { OPERATOR, STUDENT_GROUP } from 'constants/AppConstant';\nimport axios from 'axios';\nimport { DatePicker, Input, message, Radio, Select, Skeleton, Spin } from 'antd';\nimport Flex from 'components/shared-components/Flex';\n\nconst header = {\n    \"Content-type\": \"application/json\",\n    \"Authorization\": `Bearer ${ localStorage.getItem(\"userToken\") }`\n}\n\nconst config = {\n    \"headers\": header\n}\n\nconst datasheetHeader = [\n    { readOnly: true, dataIndex: \"\", className: \"not-bold\", width: \"3%\" },\n    { value: \"Status\", readOnly: true, className: \"not-bold\", width: \"5%\" },\n    { value: \"Phone\", readOnly: true, className: \"not-bold\", width: \"7.5%\" },\n    { value: \"Firstname\", readOnly: true, className: \"not-bold\", width: \"10%\" },\n    { value: \"Lastname\", readOnly: true, className: \"not-bold\", width: \"10%\" },\n    { value: \"Lesson\", readOnly: true, className: \"not-bold\", width: \"7.5%\" },\n    { value: \"Register Type\", readOnly: true, className: \"not-bold\", width: \"7.5%\" },\n    { value: \"Description\", readOnly: true, className: \"not-bold\", width: \"20%\" },\n    { value: \"Operator\", readOnly: true, className: \"not-bold\", width: \"10%\" },\n    { value: \"Time\", readOnly: true, className: \"not-bold\", width: \"7.5%\" },\n    { value: \"Date\", readOnly: true, className: \"not-bold\", width: \"7.5%\" },\n]\n\nconst fetchDetails = (details, filter) => {\n    let _filter = { ...filter }\n    Object.keys(filter).forEach(item => {\n        if (_filter[item]===null)\n            delete _filter[item]\n    })\n    return axios.post(`${url}/api/utility/detail/`, { \"projection\": details, ..._filter, \"groups\": 3 }, config);\n}\n\nconst fetchDatasheet = (filter) => {\n    let _filter = { ...filter }\n    Object.keys(filter).forEach(item => {\n        if (_filter[item]===null)\n            delete _filter[item]\n    })\n    let queryParams = Object.keys(_filter).map(item => `${item}=${_filter[item]}`).join(\"&\");\n    return axios.get(`${url}/api/datasheet/action/?${queryParams === \"\" ? \"\" : \"&\" + queryParams}`, config)\n}\n\nconst updateDatasheet = (data) => {\n    return axios.put(`${url}/api/datasheet/action/${data.id}/`, data, config);\n}\n\nconst addDatasheet = (data) => {\n    return axios.post(`${url}/api/datasheet/action/`, JSON.stringify(data), config)\n}\n\nconst generateCellData = (id, item) => {\n    return [\n        { readOnly: true, value: id, className: \"not-bold\" },\n        { value: \"\", dataIndex: \"status\", inputType: \"select\", editable: true },\n        { value: \"\", dataIndex: \"user_phone\", inputType: \"select\", editable: true },\n        { value: \"\", dataIndex: \"user_firstname\", inputType: \"normal\", editable: true },\n        { value: \"\", dataIndex: \"user_lastname\", inputType: \"normal\", editable: true },\n        { value: \"\", dataIndex: \"lesson\", inputType: \"select\", editable: true },\n        { value: \"\", dataIndex: \"register_type\", inputType: \"select\", editable: true },\n        { value: \"\", dataIndex: \"description\", inputType: \"normal\", editable: true },\n        { value: \"\", dataIndex: \"operator_firstname\", inputType: \"normal\", readOnly: true, editable: false },\n        { value: \"\", dataIndex: \"time\", inputType: \"select\", editable: true },\n        { value: \"\", dataIndex: \"date\", inputType: \"date\", editable: true },\n    ]\n}\n\nconst validatePhoneNumber = (value) => {\n    console.log(value, value.length)\n    if (value.length != 8) {\n        message.error(\"Phone number should be 8!\")\n        return false;\n    }\n    if ( /[a-zA-Z]/.test(value)) {\n        message.error(\"Phone number should not contain any letters!\")\n        return false;\n    }\n    if (value[0] != \"8\" && value[0] != \"9\") {\n        message.error(\"Invalid phone number!\")\n        return false;\n    }\n    return true;\n}\n\nconst validateBranch = (record) => {\n    if (record.branch===null) {\n        message.error(\"Select branch!\")\n        return false;\n    }\n    return true;\n}\n\nconst DatasheetTable = () => {\n    const filters = useSelector(state => state.filters);\n    const user = useSelector(state => state.userLogin.user);\n    const currentTheme = useSelector(state => state.theme.currentTheme)\n    const [ isDatasheetLoading, setDatasheetLoading ] = useState(false);\n    const [ status, setStatus ] = useState([]);\n    const [ lesson, setLesson ] = useState([]);\n    const [ operator, setOperator ] = useState([]);\n    const [ rawDatasource, setRawDataSource ] = useState([]);\n    const [ dataSource, setDatasource ] = useState([]);\n    const [ datasheetFilter, setDatasheetFilter ] = useState({\n        operator: user.role_id === OPERATOR ? user.id : null,\n        status: null,\n        lesson: null,\n        search: null,\n        day: 3,\n        date: null\n    })\n\n    const handleDatasheetFetch = useCallback(() => {\n        setDatasheetLoading(true);\n        // setCurrentPage(page);\n        let _filters = user.role_id === OPERATOR ? datasheetFilter : { ...filters, ...datasheetFilter };\n        fetchDatasheet(_filters)\n            .then(res => {\n                let _dataSource = [ datasheetHeader, ]\n                const datasheets = res.data.data.map((item, index) => {\n                    item.key = item.id + \"datasheet\";\n                    let _cellData = generateCellData(index + 1, item);\n                    _dataSource.push(_cellData);\n                    return item;\n                })\n                const branch = user.role_id === OPERATOR ? user.branch : filters.branch\n                setRawDataSource([ ...datasheets, {\n                    id: 0,\n                    key: \"0datasheet\",\n                    user_phone: null,\n                    user_firstname: null,\n                    user_lastname: null,\n                    operator_firstname: user.firstname,\n                    register_type: null,\n                    description: null,\n                    time: null,\n                    user: null,\n                    operator: user.id,\n                    status: null,\n                    lesson: null,\n                    groups: STUDENT_GROUP,\n                    branch\n                }])\n                _dataSource.push(generateCellData(_dataSource.length, {\n                    id: 0,\n                    key: \"0datasheet\",\n                    user_phone: null,\n                    user_firstname: null,\n                    user_lastname: null,\n                    operator_firstname: user.firstname,\n                    register_type: null,\n                    description: null,\n                    time: null,\n                    user: null,\n                    operator: user.id,\n                    status: null,\n                    lesson: null,\n                    groups: STUDENT_GROUP,\n                    branch\n                }));\n                setDatasource(_dataSource)\n                setDatasheetLoading(false);\n            })\n            .catch(err => {\n                console.log(err.response.data)\n            })\n    }, [ user, filters, datasheetFilter ])\n\n    const handleDetailFetch = useCallback(() => {\n        let _filters = user.role_id === OPERATOR ? datasheetFilter : { ...filters, ...datasheetFilter };\n        let detailList = []\n        if (lesson.length===0)\n            detailList.push(\"lesson\")\n        if (status.length===0)\n            detailList.push(\"datasheet_status\")\n        if (detailList.length===0)\n            return;\n        fetchDetails([ \"lesson\", \"datasheet_status\", \"user\" ], _filters)\n            .then(res => {\n                if (\"lesson\" in res.data.data)\n                    setLesson(res.data.data.lesson);\n                if (\"datasheet_status\" in res.data.data)\n                    setStatus(res.data.data.datasheet_status);\n                if (\"user\" in res.data.data)\n                    setOperator(res.data.data.user);\n            })\n            .catch(err => {\n                console.log(err.response.data);\n            })\n    }, [ user, datasheetFilter, filters ])\n\n    const handleDatasheetUpdate = async (data) => {\n        // return updateDatasheet(data, null)\n        try {\n            const res = await updateDatasheet(data, null)\n            if (res.data.success)\n                return true;\n        } catch(err) {\n            handleDatasheetFetch()\n            Object.keys(err.response.data).forEach(item => {\n                message.error(item + \": \" + err.response.data[item])\n            })\n        }\n        return false;\n    }\n\n    const handleNewDatasheetWithExisting = (item, additional, { cell, row, col, value, ...restProps }) => {\n        delete item.id;\n        const newItem = { \n            ...item, \n            ...additional,\n            user_phone: value.phone, \n            user_firstname: value.firstname,\n            user_lastname: value.lastname === null ? \"\" : value.lastname,\n        };\n        addDatasheet(newItem)\n            .then(res => handleDatasheetFetch(1))\n            .catch(err => {\n                handleDatasheetFetch()\n                Object.keys(err.response.data).forEach(item => {\n                    message.error(item + \": \" + err.response.data[item])\n                })\n            });\n        return newItem;\n    }\n\n    const handleDatasheetChange = async (changes) => {\n        const rawGrid = [ ...rawDatasource ];\n        await changes.forEach(async ({ cell, row, col, value, ...restProps }) => {\n            const item = { ...rawGrid[row - 1] };\n            if (item.id===0)\n                if (!validateBranch(item))\n                    return;\n            if (restProps.existing) {\n                rawGrid[row - 1] = handleNewDatasheetWithExisting(item, { user: value.id }, { cell, row, col, value, ...restProps });\n                return;\n            }\n            if (cell.dataIndex === \"user_phone\" && !validatePhoneNumber(value)) {\n                return;\n            }\n            item[cell.dataIndex] = value;\n            rawGrid[row - 1][cell.dataIndex] = value;\n            if (item.id===0 && item.user_firstname && item.user_phone) {\n                delete item.user;\n                item.phone = item.user_phone;\n                item.lastname = item.user_lastname;\n                item.firstname = item.user_firstname;\n                rawGrid[row - 1] = handleNewDatasheetWithExisting(item, {}, { cell, row, col, value, ...restProps });\n                return;\n            }\n            if (item.id != 0 && cell.dataIndex === \"user_phone\" || cell.dataIndex === \"user_firstname\" || cell.dataIndex === \"user_lastname\") {\n                rawGrid.forEach(_item => {\n                    if (_item.user===item.user)\n                        _item[cell.dataIndex] = value;\n                })\n                item.with_user = true;\n                item.phone = item.user_phone;\n                item.lastname = item.user_lastname;\n                item.firstname = item.user_firstname;\n                item.groups = STUDENT_GROUP;\n            }\n            if (item.id != 0) {\n                handleDatasheetUpdate(item)\n            }\n        });\n        setRawDataSource(rawGrid)\n    }\n\n    const handleFilterChange = (value, e) => {\n        let name, _value;\n        if (typeof value===\"object\") {\n            name = value.target.name;\n            _value = value.target.value;\n        } else {\n            name = \"name\" in e ? e.name : \"search\";\n            _value = value\n        }\n        if (value === \"all\")\n            setDatasheetFilter({\n                ...datasheetFilter,\n                [ name ]: null\n            })\n        else \n            setDatasheetFilter({\n                ...datasheetFilter,\n                [ name ]: _value\n            })\n    }\n\n    const handleDiableClick = () => {\n        if (filters.branch===null)\n            message.error(\"Select branch!\");\n    }\n\n    const handleSelectClear = (name) => {\n        setDatasheetFilter({\n            ...datasheetFilter,\n            [ name ]: null\n        })\n    }\n\n    const handleFilterDateSelect = (value) => {\n        setDatasheetFilter({\n            ...datasheetFilter,\n            day: -1,\n            date: value.format('YYYY-MM-DD')\n        })\n    }\n\n    useEffect(() => {\n        handleDatasheetFetch(1);\n        handleDetailFetch();\n    }, [ filters, datasheetFilter, handleDatasheetFetch, handleDetailFetch ])\n\n    return (\n        <div className=\"sheet-container\">\n            <Flex justifyContent=\"space-between\" className=\"filter-container\">\n                <Flex justifyContent=\"end\" className=\"filter-container\">\n                    <Radio.Group defaultValue=\"3\" value={ datasheetFilter.day } name=\"day\" onChange={ handleFilterChange } buttonStyle=\"solid\">\n                        <Radio.Button value={ 1 }>1 day</Radio.Button>\n                        <Radio.Button value={ 3 }>3 days</Radio.Button>\n                        <Radio.Button value={ 7 }>7 days</Radio.Button>\n                    </Radio.Group>\n                    <DatePicker onSelect={ handleFilterDateSelect } className=\"select-width\" />\n                </Flex>\n                <Flex justifyContent=\"end\" className=\"filter-container\">\n                    <Select allowClear onClear={ handleSelectClear.bind(this, \"operator\") } className=\"select-width\" onClick={ user.role_id !== OPERATOR ? handleDiableClick : null } defaultValue={ datasheetFilter.operator === null ? null : datasheetFilter.operator } disabled={ filters.branch === null && user.role_id !== OPERATOR ? true : false } placeholder=\"Operator\" onSelect={ handleFilterChange }>\n                        { operator.length != 0 ? operator.map(item => <Select.Option name=\"operator\" key={ item.id + \"datasheet-filter-operator\" } value={ item.id }> { item.firstname } </Select.Option>) : null}\n                    </Select>\n                    <Select allowClear onClear={ handleSelectClear.bind(this, \"lesson\") } className=\"select-width\" onClick={ user.role_id !== OPERATOR ? handleDiableClick : null } disabled={ filters.branch === null && user.role_id !== OPERATOR ? true : false } placeholder=\"Lesson\" onSelect={ handleFilterChange }>\n                        { lesson.length != 0 ? lesson.map(item => <Select.Option name=\"lesson\" key={ item.id + \"datasheet-filter-lesson\" } value={ item.id }> { item.name } </Select.Option>) : null}\n                    </Select>\n                    <Select allowClear onClear={ handleSelectClear.bind(this, \"status\") } className=\"select-width\" onClick={ user.role_id !== OPERATOR ? handleDiableClick : null } disabled={ filters.branch === null && user.role_id !== OPERATOR ? true : false } placeholder=\"Datasheet Status\" onSelect={ handleFilterChange }>\n                        { status.length != 0 ? status.map(item => <Select.Option name=\"status\" key={ item.id + \"datasheet-filter-status\" } value={ item.id }> { item.name } </Select.Option>) : null}\n                    </Select>\n                    <Input.Search allowClear name=\"search\" onSearch={ handleFilterChange } placeholder=\"Search...\" className=\"select-width\" />\n                </Flex>\n            </Flex>\n            { isDatasheetLoading ? (\n                <Flex justifyContent=\"center\">\n                    <Skeleton />\n                </Flex>\n            ) : (\n                <ReactDataSheet\n                    className=\"test\"\n                    data={dataSource}\n                    valueRenderer={(cell, row, col) => {\n                        if (rawDatasource.length === 0)\n                            return cell.dataIndex;\n                        if (row === 0 || col === 0)\n                            return cell.value;\n                        let body = rawDatasource[row - 1][cell.dataIndex];\n                        let _body;\n                        const record = rawDatasource[row - 1];\n                        switch(cell.dataIndex) {\n                            case \"status\":\n                                if (record.status === null)\n                                    break;\n                                _body = status.find(item => item.id === record.status);\n                                body = _body === null || _body === undefined ? cell.value : _body.name;\n                                break;\n                            case \"lesson\":\n                                if (record.lesson === null)\n                                    break;\n                                _body = lesson.find(item => item.id === record.lesson);\n                                body = _body === null || _body === undefined ? cell.value : _body.name;\n                                break;\n                            case \"register_type\":\n                                if (record.register_type === null)\n                                    break;\n                                _body = DATASHEET_REGISTER_TYPE.find(item => item.id === record.register_type);\n                                body = _body === null || _body === undefined ? cell.value : _body.name;\n                                break;\n                            default:\n                                break;\n                        }\n                        return body;\n                    }}\n                    onContextMenu={(e, cell, i, j) =>\n                        cell.readOnly ? e.preventDefault() : null\n                    }\n                    rowRenderer={ EditableRow }\n                    dataEditor={ props => {\n                        if (props.cell.inputType === \"normal\" || (props.cell.dataIndex===\"user_phone\" && rawDatasource[props.row - 1].id != 0))\n                            return <DataEditor { ...props } />\n                        return (\n                            <EditableCell\n                                { ...props }\n                                editable={ props.cell.editable }\n                                record={ rawDatasource[props.row - 1] }\n                                inputType={ props.cell.inputType }\n                                datasheetStatus={ status }\n                                lesson={ lesson }\n                                dataIndex={ props.cell.dataIndex }\n                                handleSave={ handleDatasheetChange }\n                                editing={ true }\n                            /> )\n                    } }\n\n                    onCellsChanged={ handleDatasheetChange }\n                />\n            ) }\n        </div>\n    )\n}\n\nexport default DatasheetTable;\n","import React from 'react';\nimport { Card } from 'antd';\nimport EditableTable from './EditableTable';\nimport DatasheetTable from './DatasheetTable';\nimport './style.css'\nimport { TableOutlined } from '@ant-design/icons'\n\nconst Datasheet = () => {\n    return (\n        <Card title={<h2><TableOutlined /> Datasheet</h2>} extra={null}>\n            {/* <EditableTable /> */}\n            <DatasheetTable />\n        </Card>\n    )\n}\n\nexport default Datasheet;"],"sourceRoot":""}